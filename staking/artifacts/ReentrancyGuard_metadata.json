{
	"compiler": {
		"version": "0.5.16+commit.9c3226ce"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"details": "Contract module that helps prevent reentrant calls to a function. * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier available, which can be aplied to functions to make sure there are no nested (reentrant) calls to them. * Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them.",
			"methods": {}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"staking/StakingRewardsDualFactory.sol": "ReentrancyGuard"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"staking/StakingRewardsDualFactory.sol": {
			"keccak256": "0xf584432c2fdbcc8ea3ce20342821f378a1ac509700fb621925499e9799cb9744",
			"urls": [
				"bzz-raw://142cb93a279d6222864675ecde9f8c9a3b9a23c9430bfb577efb4e24a6384ca2",
				"dweb:/ipfs/QmX6LuHMnPQo1ubkpN4djmiV4ECqpDnPbYpYqTbjsCcRJa"
			]
		}
	},
	"version": 1
}